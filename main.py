import asyncio
import json
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import mplfinance as mpf
import requests
import base64
from io import BytesIO
from datetime import datetime, timedelta
import websockets

# Test New Verion1
class DerivChartGenerator:
    def __init__(self):
        
        self.app_id = 667216  # Free app ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö demo
        self.app_id = 667226  # Free app ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö demo
        self.app_id = 66726  # Free app ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö demo
        self.ws_url = f"wss://ws.binaryws.com/websockets/v3?app_id={self.app_id}"
        self.assets = ["R_10", "R_25", "R_50", "R_75", "R_100"]
        # self.assets = ["R_10"]
        
    async def get_ticks_history(self, symbol, count=60):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ticks history ‡∏à‡∏≤‡∏Å Deriv API"""
        try:
            async with websockets.connect(self.ws_url) as websocket:
                # ‡∏™‡πà‡∏á request ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ticks history
                request = {
                    "ticks_history": symbol,
                    "adjust_start_time": 1,
                    "count": count,
                    "end": "latest",
                    "start": 1,
                    "style": "ticks"
                }
                
                await websocket.send(json.dumps(request))
                response = await websocket.recv()
                data = json.loads(response)
                
                if 'error' in data:
                    print(f"Error for {symbol}: {data['error']['message']}")
                    return None
                    
                return data
                
        except Exception as e:
            print(f"Error connecting to WebSocket for {symbol}: {e}")
            return None
    
    def ticks_to_ohlc(self, ticks_data, timeframe_minutes=1):
        """‡πÅ‡∏õ‡∏•‡∏á ticks data ‡πÄ‡∏õ‡πá‡∏ô OHLC data"""
        if not ticks_data or 'history' not in ticks_data:
            return None
            
        times = ticks_data['history']['times']
        prices = ticks_data['history']['prices']
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame
        df = pd.DataFrame({
            'timestamp': times,
            'price': prices
        })
        
        # ‡πÅ‡∏õ‡∏•‡∏á timestamp ‡πÄ‡∏õ‡πá‡∏ô datetime
        df['datetime'] = pd.to_datetime(df['timestamp'], unit='s')
        df.set_index('datetime', inplace=True)
        
        # Resample ‡πÄ‡∏õ‡πá‡∏ô 1 minute candles
        ohlc = df['price'].resample(f'{timeframe_minutes}min').ohlc()
        ohlc['volume'] = df['price'].resample(f'{timeframe_minutes}min').count()
        
        # ‡∏•‡∏ö rows ‡∏ó‡∏µ‡πà‡∏°‡∏µ NaN
        ohlc.dropna(inplace=True)
        
        # ‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà 60 ‡πÅ‡∏ó‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        ohlc = ohlc.tail(60)
        
        return ohlc
    
    def calculate_ema(self, data, period):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EMA"""
        return data.ewm(span=period, adjust=False).mean()
    
    def create_candlestick_chart(self, symbol, ohlc_data):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü candlestick ‡∏û‡∏£‡πâ‡∏≠‡∏° EMA"""
        if ohlc_data is None or ohlc_data.empty:
            print(f"No data available for {symbol}")
            return None
            
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EMA
        ohlc_data['ema3'] = self.calculate_ema(ohlc_data['close'], 3)
        ohlc_data['ema5'] = self.calculate_ema(ohlc_data['close'], 5)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á additional plots ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö EMA
        apds = [
            mpf.make_addplot(ohlc_data['ema3'], color='blue', width=1.5, label='EMA 3'),
            mpf.make_addplot(ohlc_data['ema5'], color='red', width=1.5, label='EMA 5')
        ]
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î style
        style = mpf.make_mpf_style(
            base_mpf_style='charles',
            rc={'font.size': 8}
        )
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏´
        fig, axes = mpf.plot(
            ohlc_data,
            type='candle',
            style=style,
            addplot=apds,
            volume=True,
            title=f"{symbol} - 1M Timeframe (60 Candles)",
            ylabel='Price',
            ylabel_lower='Volume',
            figsize=(12, 8),
            returnfig=True,
            show_nontrading=False
        )
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° legend ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö EMA
        axes[0].legend(['EMA 3', 'EMA 5'], loc='upper left')
        
        return fig
    
    def save_chart_as_image(self, fig, symbol):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏õ‡πá‡∏ô image ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô base64"""
        if fig is None:
            return None
            
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô bytes
        img_buffer = BytesIO()
        fig.savefig(img_buffer, format='png', dpi=300, bbox_inches='tight')
        img_buffer.seek(0)
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô base64
        img_base64 = base64.b64encode(img_buffer.read()).decode('utf-8')
        
        # ‡∏õ‡∏¥‡∏î figure ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î memory
        plt.close(fig)
        
        return img_base64
    
    def send_to_api(self, symbol, image_base64, ohlc_data):
        """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á API"""
        if image_base64 is None:
            print(f"No image data for {symbol}")
            return False
            
        try:
            # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á
            latest_data = ohlc_data.iloc[-1]  # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            
            payload = {
                'symbol': symbol,
                'timeframe': '1M',
                'image_data': image_base64,
                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'latest_price': float(latest_data['close']),
                'latest_open': float(latest_data['open']),
                'latest_high': float(latest_data['high']),
                'latest_low': float(latest_data['low']),
                'latest_volume': int(latest_data['volume']),
                'ema3': float(latest_data['ema3']),
                'ema5': float(latest_data['ema5'])
            }
            
            # ‡∏™‡πà‡∏á POST request
            response = requests.post(
                'https://lovetoshopmall.com/iqlab/saveImage.php',
                json=payload,
                headers={'Content-Type': 'application/json'},
                timeout=30
            )
            print(f"üìù {symbol}: API Response - {response.text}")
            if response.status_code == 200:
                print(f"‚úÖ {symbol}: Successfully sent to API")
                return True
            else:
                print(f"‚ùå {symbol}: API Error - Status Code: {response.status_code}")
                print(f"Response: {response.text}")
                return False
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå {symbol}: Request Error - {e}")
            return False
        except Exception as e:
            print(f"‚ùå {symbol}: Unexpected Error - {e}")
            return False
    
    async def process_symbol(self, symbol):
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö symbol ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß"""
        print(f"üîÑ Processing {symbol}...")
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ticks
        ticks_data = await self.get_ticks_history(symbol, count=1000)  # ‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏¢‡∏≠‡∏∞‡∏´‡∏ô‡πà‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ 60 ‡πÅ‡∏ó‡πà‡∏á
        
        if ticks_data is None:
            print(f"‚ùå {symbol}: Failed to get ticks data")
            return False
            
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô OHLC
        ohlc_data = self.ticks_to_ohlc(ticks_data)
        
        if ohlc_data is None or ohlc_data.empty:
            print(f"‚ùå {symbol}: Failed to convert to OHLC")
            return False
            
        print(f"üìä {symbol}: Got {len(ohlc_data)} candles")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü
        fig = self.create_candlestick_chart(symbol, ohlc_data)
        
        if fig is None:
            print(f"‚ùå {symbol}: Failed to create chart")
            return False
            
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô base64
        image_base64 = self.save_chart_as_image(fig, symbol)
        
        if image_base64 is None:
            print(f"‚ùå {symbol}: Failed to convert to base64")
            return False
            
        # ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
        success = self.send_to_api(symbol, image_base64, ohlc_data)
        
        return success
    
    async def run_all_assets(self):
        """‡∏£‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö assets ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        print("üöÄ Starting chart generation for all assets...")
        print(f"Assets: {', '.join(self.assets)}")
        print("-" * 50)
        
        successful = 0
        failed = 0
        
        for symbol in self.assets:
            try:
                success = await self.process_symbol(symbol)
                if success:
                    successful += 1
                else:
                    failed += 1
                    
                # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á requests
                await asyncio.sleep(1)
                
            except Exception as e:
                print(f"‚ùå {symbol}: Unexpected error - {e}")
                failed += 1
        
        print("-" * 50)
        print(f"‚úÖ Completed: {successful} successful, {failed} failed")
        print(f"üìä Total processed: {successful + failed}/{len(self.assets)} assets")

# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
async def main():
    generator = DerivChartGenerator()
    await generator.run_all_assets()

# ‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
if __name__ == "__main__":
    # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    print("üì¶ Required packages:")
    print("pip install pandas numpy matplotlib mplfinance requests websockets")
    print("-" * 50)
    
    # ‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
    asyncio.run(main())
